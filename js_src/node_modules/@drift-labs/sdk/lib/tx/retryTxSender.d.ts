/// <reference types="node" />
import { TxSender, TxSigAndSlot } from '@drift-labs/sdk/lib/tx/types';
import { Commitment, ConfirmOptions, RpcResponseAndContext, Signer, SignatureResult, Transaction, TransactionSignature, Connection, VersionedTransaction, TransactionInstruction, AddressLookupTableAccount } from '@solana/web3.js';
import { AnchorProvider } from '@coral-xyz/anchor';
type ResolveReference = {
    resolve?: () => void;
};
export declare class RetryTxSender implements TxSender {
    provider: AnchorProvider;
    timeout: number;
    retrySleep: number;
    additionalConnections: Connection[];
    constructor(provider: AnchorProvider, timeout?: number, retrySleep?: number, additionalConnections?: Connection[]);
    send(tx: Transaction, additionalSigners?: Array<Signer>, opts?: ConfirmOptions, preSigned?: boolean): Promise<TxSigAndSlot>;
    prepareTx(tx: Transaction, additionalSigners: Array<Signer>, opts: ConfirmOptions): Promise<Transaction>;
    getVersionedTransaction(ixs: TransactionInstruction[], lookupTableAccounts: AddressLookupTableAccount[], additionalSigners?: Array<Signer>, opts?: ConfirmOptions): Promise<VersionedTransaction>;
    sendVersionedTransaction(ixs: TransactionInstruction[], lookupTableAccounts: AddressLookupTableAccount[], additionalSigners?: Array<Signer>, opts?: ConfirmOptions): Promise<TxSigAndSlot>;
    sendRawTransaction(rawTransaction: Buffer | Uint8Array, opts: ConfirmOptions): Promise<TxSigAndSlot>;
    confirmTransaction(signature: TransactionSignature, commitment?: Commitment): Promise<RpcResponseAndContext<SignatureResult>>;
    getTimestamp(): number;
    sleep(reference: ResolveReference): Promise<void>;
    promiseTimeout<T>(promises: Promise<T>[], timeoutMs: number): Promise<T | null>;
    sendToAdditionalConnections(rawTx: Buffer | Uint8Array, opts: ConfirmOptions): void;
    addAdditionalConnection(newConnection: Connection): void;
}
export {};
