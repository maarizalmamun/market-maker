import { User } from '@drift-labs/sdk/lib/user';
import { PerpMarketAccount, AMM, Order } from '@drift-labs/sdk/lib/types';
import { BN } from '@coral-xyz/anchor';
import { OraclePriceData } from '@drift-labs/sdk/lib/oracles/types';
export declare function isOrderRiskIncreasing(user: User, order: Order): boolean;
export declare function isOrderRiskIncreasingInSameDirection(user: User, order: Order): boolean;
export declare function isOrderReduceOnly(user: User, order: Order): boolean;
export declare function standardizeBaseAssetAmount(baseAssetAmount: BN, stepSize: BN): BN;
export declare function getLimitPrice(order: Order, oraclePriceData: OraclePriceData, slot: number, fallbackPrice?: BN): BN | undefined;
export declare function hasLimitPrice(order: Order, slot: number): boolean;
export declare function hasAuctionPrice(order: Order, slot: number): boolean;
export declare function isFillableByVAMM(order: Order, market: PerpMarketAccount, oraclePriceData: OraclePriceData, slot: number, ts: number): boolean;
export declare function calculateBaseAssetAmountForAmmToFulfill(order: Order, market: PerpMarketAccount, oraclePriceData: OraclePriceData, slot: number): BN;
export declare function calculateBaseAssetAmountToFillUpToLimitPrice(order: Order, amm: AMM, limitPrice: BN, oraclePriceData: OraclePriceData): BN;
export declare function isOrderExpired(order: Order, ts: number): boolean;
export declare function isMarketOrder(order: Order): boolean;
export declare function isLimitOrder(order: Order): boolean;
export declare function mustBeTriggered(order: Order): boolean;
export declare function isTriggered(order: Order): boolean;
export declare function isRestingLimitOrder(order: Order, slot: number): boolean;
export declare function isTakingOrder(order: Order, slot: number): boolean;
