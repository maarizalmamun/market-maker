"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unstakeSharesToAmountWithOpenRequest = exports.unstakeSharesToAmount = exports.stakeAmountToShares = void 0;
const numericConstants_1 = require("../constants/numericConstants");
const index_1 = require("../index");
function stakeAmountToShares(amount, totalIfShares, insuranceFundVaultBalance) {
    let nShares;
    if (insuranceFundVaultBalance.gt(numericConstants_1.ZERO)) {
        nShares = amount.mul(totalIfShares).div(insuranceFundVaultBalance);
    }
    else {
        nShares = amount;
    }
    return nShares;
}
exports.stakeAmountToShares = stakeAmountToShares;
function unstakeSharesToAmount(nShares, totalIfShares, insuranceFundVaultBalance) {
    let amount;
    if (totalIfShares.gt(numericConstants_1.ZERO)) {
        amount = index_1.BN.max(numericConstants_1.ZERO, nShares.mul(insuranceFundVaultBalance).div(totalIfShares));
    }
    else {
        amount = numericConstants_1.ZERO;
    }
    return amount;
}
exports.unstakeSharesToAmount = unstakeSharesToAmount;
function unstakeSharesToAmountWithOpenRequest(nShares, withdrawRequestShares, withdrawRequestAmount, totalIfShares, insuranceFundVaultBalance) {
    let stakedAmount;
    if (totalIfShares.gt(numericConstants_1.ZERO)) {
        stakedAmount = index_1.BN.max(numericConstants_1.ZERO, nShares
            .sub(withdrawRequestShares)
            .mul(insuranceFundVaultBalance)
            .div(totalIfShares));
    }
    else {
        stakedAmount = numericConstants_1.ZERO;
    }
    const withdrawAmount = index_1.BN.min(withdrawRequestAmount, withdrawRequestShares.mul(insuranceFundVaultBalance).div(totalIfShares));
    const amount = withdrawAmount.add(stakedAmount);
    return amount;
}
exports.unstakeSharesToAmountWithOpenRequest = unstakeSharesToAmountWithOpenRequest;
