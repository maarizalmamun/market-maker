"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollingLogProvider = void 0;
const fetchLogs_1 = require("./fetchLogs");
class PollingLogProvider {
    constructor(connection, programId, commitment, frequency = 15 * 1000) {
        this.connection = connection;
        this.programId = programId;
        this.frequency = frequency;
        this.firstFetch = true;
        this.finality = commitment === 'finalized' ? 'finalized' : 'confirmed';
    }
    subscribe(callback, skipHistory) {
        if (this.intervalId) {
            return true;
        }
        this.intervalId = setInterval(async () => {
            if (this.mutex === 1) {
                return;
            }
            this.mutex = 1;
            try {
                const response = await (0, fetchLogs_1.fetchLogs)(this.connection, this.programId, this.finality, undefined, this.mostRecentSeenTx, 
                // If skipping history, only fetch one log back, not the maximum amount available
                skipHistory && this.firstFetch ? 1 : undefined);
                if (response === undefined) {
                    return;
                }
                this.firstFetch = false;
                const { mostRecentTx, transactionLogs } = response;
                for (const { txSig, slot, logs } of transactionLogs) {
                    callback(txSig, slot, logs, response.mostRecentBlockTime);
                }
                this.mostRecentSeenTx = mostRecentTx;
            }
            catch (e) {
                console.error('PollingLogProvider threw an Error');
                console.error(e);
            }
            finally {
                this.mutex = 0;
            }
        }, this.frequency);
        return true;
    }
    isSubscribed() {
        return this.intervalId !== undefined;
    }
    async unsubscribe() {
        if (this.intervalId !== undefined) {
            clearInterval(this.intervalId);
            this.intervalId = undefined;
        }
        return true;
    }
}
exports.PollingLogProvider = PollingLogProvider;
