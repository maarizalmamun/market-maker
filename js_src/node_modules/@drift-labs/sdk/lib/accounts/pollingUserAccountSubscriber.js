"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollingUserAccountSubscriber = void 0;
const types_1 = require("./types");
const events_1 = require("events");
class PollingUserAccountSubscriber {
    constructor(program, userAccountPublicKey, accountLoader) {
        this.isSubscribed = false;
        this.program = program;
        this.accountLoader = accountLoader;
        this.eventEmitter = new events_1.EventEmitter();
        this.userAccountPublicKey = userAccountPublicKey;
    }
    async subscribe(userAccount) {
        if (this.isSubscribed) {
            return true;
        }
        if (userAccount) {
            this.user = { data: userAccount, slot: undefined };
        }
        await this.addToAccountLoader();
        await this.fetchIfUnloaded();
        if (this.doesAccountExist()) {
            this.eventEmitter.emit('update');
        }
        this.isSubscribed = true;
        return true;
    }
    async addToAccountLoader() {
        if (this.callbackId) {
            return;
        }
        this.callbackId = await this.accountLoader.addAccount(this.userAccountPublicKey, (buffer, slot) => {
            if (!buffer) {
                return;
            }
            if (this.user && this.user.slot > slot) {
                return;
            }
            const account = this.program.account.user.coder.accounts.decode('User', buffer);
            this.user = { data: account, slot };
            this.eventEmitter.emit('userAccountUpdate', account);
            this.eventEmitter.emit('update');
        });
        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {
            this.eventEmitter.emit('error', error);
        });
    }
    async fetchIfUnloaded() {
        if (this.user === undefined) {
            await this.fetch();
        }
    }
    async fetch() {
        var _a, _b;
        await this.accountLoader.load();
        const { buffer, slot } = this.accountLoader.getBufferAndSlot(this.userAccountPublicKey);
        const currentSlot = (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.slot) !== null && _b !== void 0 ? _b : 0;
        if (buffer && slot > currentSlot) {
            const account = this.program.account.user.coder.accounts.decode('User', buffer);
            this.user = { data: account, slot };
        }
    }
    doesAccountExist() {
        return this.user !== undefined;
    }
    async unsubscribe() {
        if (!this.isSubscribed) {
            return;
        }
        this.accountLoader.removeAccount(this.userAccountPublicKey, this.callbackId);
        this.callbackId = undefined;
        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);
        this.errorCallbackId = undefined;
        this.isSubscribed = false;
    }
    assertIsSubscribed() {
        if (!this.isSubscribed) {
            throw new types_1.NotSubscribedError('You must call `subscribe` before using this function');
        }
    }
    getUserAccountAndSlot() {
        this.assertIsSubscribed();
        return this.user;
    }
    updateData(userAccount, slot) {
        if (!this.user || this.user.slot < slot) {
            this.user = { data: userAccount, slot };
            this.eventEmitter.emit('userAccountUpdate', userAccount);
            this.eventEmitter.emit('update');
        }
    }
}
exports.PollingUserAccountSubscriber = PollingUserAccountSubscriber;
