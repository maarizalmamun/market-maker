/// <reference types="node" />
import { DriftClientAccountSubscriber, DriftClientAccountEvents, DataAndSlot } from '@drift-labs/sdk/lib/accounts/types';
import { AccountSubscriber } from '@drift-labs/sdk/lib/accounts/types';
import { SpotMarketAccount, PerpMarketAccount, StateAccount } from '@drift-labs/sdk/lib/types';
import { Program } from '@coral-xyz/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { PublicKey } from '@solana/web3.js';
import { OracleInfo, OraclePriceData } from '@drift-labs/sdk/lib/oracles/types';
import { OracleClientCache } from '@drift-labs/sdk/lib/oracles/oracleClientCache';
export declare class WebSocketDriftClientAccountSubscriber implements DriftClientAccountSubscriber {
    isSubscribed: boolean;
    program: Program;
    perpMarketIndexes: number[];
    spotMarketIndexes: number[];
    oracleInfos: OracleInfo[];
    oracleClientCache: OracleClientCache;
    eventEmitter: StrictEventEmitter<EventEmitter, DriftClientAccountEvents>;
    stateAccountSubscriber?: AccountSubscriber<StateAccount>;
    perpMarketAccountSubscribers: Map<number, AccountSubscriber<PerpMarketAccount>>;
    spotMarketAccountSubscribers: Map<number, AccountSubscriber<SpotMarketAccount>>;
    oracleSubscribers: Map<string, AccountSubscriber<OraclePriceData>>;
    private isSubscribing;
    private subscriptionPromise;
    private subscriptionPromiseResolver;
    constructor(program: Program, perpMarketIndexes: number[], spotMarketIndexes: number[], oracleInfos: OracleInfo[]);
    subscribe(): Promise<boolean>;
    subscribeToPerpMarketAccounts(): Promise<boolean>;
    subscribeToPerpMarketAccount(marketIndex: number): Promise<boolean>;
    subscribeToSpotMarketAccounts(): Promise<boolean>;
    subscribeToSpotMarketAccount(marketIndex: number): Promise<boolean>;
    subscribeToOracles(): Promise<boolean>;
    subscribeToOracle(oracleInfo: OracleInfo): Promise<boolean>;
    unsubscribeFromMarketAccounts(): Promise<void>;
    unsubscribeFromSpotMarketAccounts(): Promise<void>;
    unsubscribeFromOracles(): Promise<void>;
    fetch(): Promise<void>;
    unsubscribe(): Promise<void>;
    addSpotMarket(marketIndex: number): Promise<boolean>;
    addPerpMarket(marketIndex: number): Promise<boolean>;
    addOracle(oracleInfo: OracleInfo): Promise<boolean>;
    assertIsSubscribed(): void;
    getStateAccountAndSlot(): DataAndSlot<StateAccount>;
    getMarketAccountAndSlot(marketIndex: number): DataAndSlot<PerpMarketAccount> | undefined;
    getMarketAccountsAndSlots(): DataAndSlot<PerpMarketAccount>[];
    getSpotMarketAccountAndSlot(marketIndex: number): DataAndSlot<SpotMarketAccount> | undefined;
    getSpotMarketAccountsAndSlots(): DataAndSlot<SpotMarketAccount>[];
    getOraclePriceDataAndSlot(oraclePublicKey: PublicKey): DataAndSlot<OraclePriceData> | undefined;
}
