"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const __1 = require("..");
const web3_js_1 = require("@solana/web3.js");
const __2 = require("..");
const env = 'mainnet-beta';
const main = async () => {
    // Initialize Drift SDK
    const sdkConfig = (0, __2.initialize)({ env });
    // Set up the Wallet and Provider
    const privateKey = process.env.BOT_PRIVATE_KEY; // stored as an array string
    const keypair = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(JSON.parse(privateKey)));
    const wallet = new __1.Wallet(keypair);
    // Set up the Connection
    const rpcAddress = process.env.RPC_ADDRESS; // can use: https://api.devnet.solana.com for devnet; https://api.mainnet-beta.solana.com for mainnet;
    const connection = new web3_js_1.Connection(rpcAddress);
    // Set up the Provider
    const provider = new anchor_1.AnchorProvider(connection, wallet, anchor_1.AnchorProvider.defaultOptions());
    // Set up the Drift Clearing House
    const driftPublicKey = new web3_js_1.PublicKey(sdkConfig.DRIFT_PROGRAM_ID);
    const bulkAccountLoader = new __2.BulkAccountLoader(connection, 'confirmed', 1000);
    const driftClient = new __2.DriftClient({
        connection,
        wallet: provider.wallet,
        programID: driftPublicKey,
        ...(0, __2.getMarketsAndOraclesForSubscription)(env),
        accountSubscription: {
            type: 'polling',
            accountLoader: bulkAccountLoader,
        },
    });
    console.log('Subscribing drift client...');
    await driftClient.subscribe();
    console.log('Loading user map...');
    const userMap = new __1.UserMap(driftClient, {
        type: 'polling',
        accountLoader: bulkAccountLoader,
    });
    // fetches all users and subscribes for updates
    await userMap.subscribe();
    console.log('Loading dlob from user map...');
    const dlob = new __1.DLOB();
    await dlob.initFromUserMap(userMap, bulkAccountLoader.mostRecentSlot);
    console.log('number of orders', dlob.getDLOBOrders().length);
    dlob.clear();
    console.log('Unsubscribing users...');
    await userMap.unsubscribe();
    console.log('Unsubscribing drift client...');
    await driftClient.unsubscribe();
};
main();
