"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenAddress = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const __1 = require("..");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const __2 = require("..");
const spotMarkets_1 = require("../constants/spotMarkets");
const getTokenAddress = (mintAddress, userPubKey) => {
    return spl_token_1.Token.getAssociatedTokenAddress(new web3_js_1.PublicKey(`ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`), spl_token_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey(mintAddress), new web3_js_1.PublicKey(userPubKey));
};
exports.getTokenAddress = getTokenAddress;
const env = 'devnet';
const main = async () => {
    // Initialize Drift SDK
    const sdkConfig = (0, __2.initialize)({ env });
    // Set up the Wallet and Provider
    const privateKey = process.env.BOT_PRIVATE_KEY; // stored as an array string
    const keypair = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(JSON.parse(privateKey)));
    const wallet = new __1.Wallet(keypair);
    // Set up the Connection
    const rpcAddress = process.env.RPC_ADDRESS; // can use: https://api.devnet.solana.com for devnet; https://api.mainnet-beta.solana.com for mainnet;
    const connection = new web3_js_1.Connection(rpcAddress);
    // Set up the Provider
    const provider = new anchor_1.AnchorProvider(connection, wallet, anchor_1.AnchorProvider.defaultOptions());
    // Check SOL Balance
    const lamportsBalance = await connection.getBalance(wallet.publicKey);
    console.log('SOL balance:', lamportsBalance / 10 ** 9);
    // Misc. other things to set up
    const usdcTokenAddress = await (0, exports.getTokenAddress)(sdkConfig.USDC_MINT_ADDRESS, wallet.publicKey.toString());
    // Set up the Drift Clearing House
    const driftPublicKey = new web3_js_1.PublicKey(sdkConfig.DRIFT_PROGRAM_ID);
    const bulkAccountLoader = new __2.BulkAccountLoader(connection, 'confirmed', 1000);
    const driftClient = new __2.DriftClient({
        connection,
        wallet: provider.wallet,
        programID: driftPublicKey,
        ...(0, __2.getMarketsAndOraclesForSubscription)(env),
        accountSubscription: {
            type: 'polling',
            accountLoader: bulkAccountLoader,
        },
    });
    await driftClient.subscribe();
    // Set up user client
    const user = new __2.User({
        driftClient: driftClient,
        userAccountPublicKey: await driftClient.getUserAccountPublicKey(),
        accountSubscription: {
            type: 'polling',
            accountLoader: bulkAccountLoader,
        },
    });
    //// Check if user account exists for the current wallet
    const userAccountExists = await user.exists();
    if (!userAccountExists) {
        //// Create a Clearing House account by Depositing some USDC ($10,000 in this case)
        const depositAmount = new anchor_1.BN(10000).mul(__2.QUOTE_PRECISION);
        await driftClient.initializeUserAccountAndDepositCollateral(depositAmount, await (0, exports.getTokenAddress)(usdcTokenAddress.toString(), wallet.publicKey.toString()), spotMarkets_1.SpotMarkets['devnet'][0].marketIndex);
    }
    await user.subscribe();
    // Get current price
    const solMarketInfo = sdkConfig.PERP_MARKETS.find((market) => market.baseAssetSymbol === 'SOL');
    const marketIndex = solMarketInfo.marketIndex;
    const [bid, ask] = (0, __1.calculateBidAskPrice)(driftClient.getPerpMarketAccount(marketIndex).amm, driftClient.getOracleDataForPerpMarket(marketIndex));
    const formattedBidPrice = (0, __2.convertToNumber)(bid, __2.PRICE_PRECISION);
    const formattedAskPrice = (0, __2.convertToNumber)(ask, __2.PRICE_PRECISION);
    console.log(`Current amm bid and ask price are $${formattedBidPrice} and $${formattedAskPrice}`);
    // Estimate the slippage for a $5000 LONG trade
    const solMarketAccount = driftClient.getPerpMarketAccount(solMarketInfo.marketIndex);
    const slippage = (0, __2.convertToNumber)((0, __2.calculateTradeSlippage)(__2.PositionDirection.LONG, new anchor_1.BN(1).mul(__1.BASE_PRECISION), solMarketAccount, 'base', driftClient.getOracleDataForPerpMarket(solMarketInfo.marketIndex))[0], __2.PRICE_PRECISION);
    console.log(`Slippage for a 1 SOL-PERP would be $${slippage}`);
    await driftClient.placePerpOrder((0, __1.getMarketOrderParams)({
        baseAssetAmount: new anchor_1.BN(1).mul(__1.BASE_PRECISION),
        direction: __2.PositionDirection.LONG,
        marketIndex: solMarketAccount.marketIndex,
    }));
    console.log(`Placed a 1 SOL-PERP LONG order`);
};
main();
