"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DLOBApiClient = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const DLOBOrders_1 = require("./DLOBOrders");
const DLOB_1 = require("./DLOB");
class DLOBApiClient {
    constructor(config) {
        this.dlobCoder = DLOBOrders_1.DLOBOrdersCoder.create();
        this.lastSeenSlot = 0;
        this.url = config.url;
    }
    async getDLOB(slot) {
        const r = await (0, node_fetch_1.default)(this.url);
        if (!r.ok) {
            throw new Error(`Failed to fetch DLOB from ${this.url}. Status: ${r.status}, ${r.statusText}`);
        }
        const resp = await r.json();
        const responseSlot = resp['slot'];
        if (responseSlot > this.lastSeenSlot) {
            const dlobOrdersBuffer = Buffer.from(resp['data'], 'base64');
            const dlobOrders = this.dlobCoder.decode(Buffer.from(dlobOrdersBuffer));
            const dlob = new DLOB_1.DLOB();
            dlob.initFromOrders(dlobOrders, slot);
            this.lastSeenDLOB = dlob;
            this.lastSeenSlot = responseSlot;
        }
        return this.lastSeenDLOB;
    }
}
exports.DLOBApiClient = DLOBApiClient;
