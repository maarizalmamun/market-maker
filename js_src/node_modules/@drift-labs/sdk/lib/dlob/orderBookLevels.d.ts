import { BN, DLOBNode, OraclePriceData, PerpMarketAccount } from '@drift-labs/sdk';
import { PublicKey } from '@solana/web3.js';
type liquiditySource = 'serum' | 'vamm' | 'dlob' | 'phoenix';
export type L2Level = {
    price: BN;
    size: BN;
    sources: {
        [key in liquiditySource]?: BN;
    };
};
export type L2OrderBook = {
    asks: L2Level[];
    bids: L2Level[];
};
export interface L2OrderBookGenerator {
    getL2Asks(): Generator<L2Level>;
    getL2Bids(): Generator<L2Level>;
}
export type L3Level = {
    price: BN;
    size: BN;
    maker: PublicKey;
    orderId: number;
};
export type L3OrderBook = {
    asks: L3Level[];
    bids: L3Level[];
};
/**
 * Get an {@link Generator<L2Level>} generator from a {@link Generator<DLOBNode>}
 * @param dlobNodes e.g. {@link DLOB#getMakerLimitAsks} or {@link DLOB#getMakerLimitBids}
 * @param oraclePriceData
 * @param slot
 */
export declare function getL2GeneratorFromDLOBNodes(dlobNodes: Generator<DLOBNode>, oraclePriceData: OraclePriceData, slot: number): Generator<L2Level>;
export declare function mergeL2LevelGenerators(l2LevelGenerators: Generator<L2Level>[], compare: (a: L2Level, b: L2Level) => boolean): Generator<L2Level>;
export declare function createL2Levels(generator: Generator<L2Level>, depth: number): L2Level[];
export declare function getVammL2Generator({ marketAccount, oraclePriceData, numOrders, now, }: {
    marketAccount: PerpMarketAccount;
    oraclePriceData: OraclePriceData;
    numOrders: number;
    now?: BN;
}): L2OrderBookGenerator;
export {};
